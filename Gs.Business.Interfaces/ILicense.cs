using System;

namespace GalleryServer.Business.Interfaces
{
  /// <summary>
  /// Represents a license for the Gallery Server software.
  /// </summary>
  public interface ILicense
  {
    /// <summary>
    /// Gets or sets the email used to purchase the license key. Ignored for free licenses.
    /// </summary>
    /// <value>The license email.</value>
    string LicenseEmail { get; set; }

    /// <summary>
    /// Gets or sets the license key.
    /// </summary>
    /// <value>The license key.</value>
    string LicenseKey { get; set; }

    /// <summary>
    /// Gets or sets the instance ID. This is a string generated by the license server that uniquely identifies an activated 
    /// installation. It will be empty for the trial and free versions.
    /// </summary>
    /// <value>The license key.</value>
    string InstanceId { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the license contained in this instance is legitimate and authorized.
    /// </summary>
    /// <value><c>true</c> if the license is valid; otherwise, <c>false</c>.</value>
    bool IsValid { get; set; }

    /// <summary>
    /// Gets or sets a message explaining why the key is invalid or why a deactivation failed. Will be blank when activation
    /// or deactivation is successful.
    /// </summary>
    /// <value>A string explaining why the key is invalid or why a deactivation failed.</value>
    string KeyInvalidReason { get; set; }

    /// <summary>
    /// Gets or sets the application version the license applies to. Example: 4.0.0, 4.1.2
    /// </summary>
    /// <value>The application version the license applies to.</value>
    string Version { get; set; }

    /// <summary>
    /// Gets or sets the type of the license applied to the current application.
    /// </summary>
    /// <value>The type of the license.</value>
    LicenseLevel LicenseType { get; set; }

    /// <summary>
    /// Gets the date/time this application was installed. The timestamp of the oldest gallery's creation date is
    /// considered to be the application install date.
    /// </summary>
    /// <value>The date/time this application was installed.</value>
    DateTime InstallDate { get; set; }

    /// <summary>
    /// Gets the full file path to where the version key file is expected to be. Does not verify the file exists.
    /// Ex: "C:\inetpub\wwwroot\Website\App_Data\version_key.txt"
    /// </summary>
    /// <value>The version key file path.</value>
    string VersionKeyFilePath { get; }

    /// <summary>
    /// Populate the calculated properties based on the properties retrieved from the data store. It is intended that this
    /// method is invoked during application initialization or after a license deactivation.
    /// </summary>
    void Inflate();

    /// <summary>
    /// Verify whether the <paramref name="licenseEmail" /> and <paramref name="licenseKey" /> is valid. This method stores the 
    /// parameters on the matching instance properties (even if activation fails) and updates <see cref="IsValid" />,
    /// <see cref="KeyInvalidReason" />, and <see cref="LicenseType" />, which may be inspected for follow-up action.
    /// </summary>
    /// <param name="licenseEmail">The license email.</param>
    /// <param name="licenseKey">The license key to validate.</param>
    /// <param name="appUrl">The URL to the root of the gallery application.</param>
    void Activate(string licenseEmail, string licenseKey, string appUrl);

    /// <summary>
    /// Deactivates a license that was previously activated.
    /// </summary>
    /// <returns><c>true</c> if deactivation successful, <c>false</c> otherwise.</returns>
    bool Deactivate();
  }
}